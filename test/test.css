@charset "utf-8";
/*cmt */
@namespace url(http://www.w3.org/1999/xhtml);

@-moz-document domain("example.com") {
  @import url('landscape.css') screen and (orientation:landscape);
  @import url(base-forms.css) layer;
  @import url(bootstrap-base.css) layer(base);
  @import url("narrow.css") supports(display: flex) handheld and (max-width: 400px);
  /*cmt */
  @media (min-width: 30em) {
    @layer layout {
      @supports selector(:nth-child(-n-3)) {}
      @supports selector(:nth-child(+n-3)) {}
      .\:fc-\40 escape:nth-child(-1n+6) {}
      .h\:fc-\40 escape:nth-child(2) {}
      .h\:fc-\40 escape:nth-child(2n) {}
      .ha\:fc-\40 escape:nth-child(odd) {}
      .ha\: fc-\40 escape:nth-child(even of :not([hidden])) {}
      .ha\30 fc-\40 escape:nth-child(3n + -6) {}
      .ha\30-c-\40 escape:nth-child(-3n+-6) {}
      .h\300a -\40 escape:nth-child(-3-+6) {}
      .\300a -\40 escape:nth-child(+ 3n) {}
      \400a -\40 escape:nth-child(-3 n) {}
      .title:nth-child(2n of a:not(.foo)) [class ~="\400a -\40 esacapecb-\
heading"] {
        text-shadow: 0 1px 1px rgba(220, 220, 220, .25), 0 1px 25px rgba(27, 31, 35, .75);
      	padding: 0px 4px;
        filter: drop-shadow(0px 0px 2px black);
        font-size: x-large;
        filter: brightness(50%) ! /*foo*/ I\m portant;
        font-synthesis-style: auto !important !important;
        font-synthesis-weight: auto;
        font-synthesis-small-caps: auto;
      }
    }
  }
  @media screen and (prefers-color-scheme: dark), dark {
    @layer theme {
      .title:nth-child(-n+ 2)[ /*foo*/ bar /*[[hmmm]]*/] { color: white; }
    }
  }
  @layer theme, layout;
}

@-moz-document domain("example.com") {
  @import "https://unpkg.com/open-props" layer(design.system);
  @import "https://unpkg.com/open-props/normalize.min.css" layer(demo.support);
  @layer demo.support;
  @layer demo {
    .swatch:nth-child(n -1 of a:has(b)) {
      background: -webkit-cross-fade(url(white.png), url(black.png), 25%);
      inline-size: var(--size-3);
      aspect-ratio: calc(pow(e, pi) - pi);
      box-shadow: var(--inner-shadow-0);
      border-radius: var(--radius-1);
    }
  }
  @layer demo.support {
    @media (prefers-color-scheme: light) {
      body {
        background: var(--gray-3);
      }
    }
  }
}

@-moz-document domain("bing.com") {
  @import url('landscape.css') screen and (orientation:landscape);
  @font-face {
    font-family: MyHelvetica;
    src: local("Helvetica Neue Bold"),
         local("HelveticaNeue-Bold"),
         url(MgOpenModernaBold.ttf);
    font-weight: bold;
    unicode-range: U+0?00-5FF, U+1e00-1???, U+222000-2300;
    unicode-range: U+000-49F, U+2000-27FF, U+2900-2BFF, U+1D400-1D7FF;
    unicode-range: U+3000???-9FFF, U+ffz??;
    color: red;
  }
  @font-palette-values Test {
    font-family: "Open Sans";
    base-palette: 1;
    override-colors:
      1 #7EB7E4;
  }
  @container card (inline-size > 30em) and style(--responsive: true) {
  /*   h2.title:has(a[href *="ruarÃ­"]), */
    a:has( > img):has(+ dt):not(:has(h1, h2, h3, h4, h5, h6)):has(:not(h1, h2, h3, h4, h5, h6)),
    svg.mobile-hero:not(.a + .b .c) {
      color: /*[[color]]*/80;
      color: /*[[color]]*/;
      color: rgba(/*[[color-rgb]]*/, .5);
      container: my-component / inline-size;
      container: my-component / inline-size22;
      filter: invert(100%) hue-rotate(180deg);
      object-overflow: visible2;
      clip-path: path(evenodd, 'M 5 5 h 100 v 100 Z');
      content: 'string' attr(a);
      content: attr(a) 'string';
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      animation: AnimatedEllipsis-keyframes 1.2s steps(4, jump-none) infinite;
      shape-rendering: geometricPrecision;
      filter: alpha(opacity=70);
      aspect-ratio: 16 / 9;
      accent-color: red;
      overflow-clip-margin: 10px;
      background: -webkit-linear-gradient(-70deg, #4f8cc9, #01a49e);
      transform: perspective(none);
      color-scheme: only light;
      text-emphasis: circle;
    }
  }
  .docs-material .goog-menuitem-icon .docs-icon-img-container,
  #\3a 4 > div > div > div.docs-homescreen-leftmenu-menuitem-icon > div,
  #\3a 5 > div > div > div.docs-homescreen-leftmenu-menuitem-icon > div {
    opacity: 1!important;
    filter: invert(foo0)!important;
    filter: foo(1);
    @media not (width <= -100px) {
      background: green;
      @media (400px <= width <= 700px) {
        body { background: green; }
      }
    }
  }
  @media (height > -100px), (update: fast) or (update: slow) {
    body { background: green; }
  }
  @media not (resolution: -300dpi) {
    body { background: green; }
  }
  @media (max-width: 640px) {
    *:focus-visible:--state1:loading {
      display: none;
      background-position-x: 0;
      background-position-y: 0 <oopsie>
      @supports selector( :is(test::placeholder) + :first-child > div ) {
        aa {
          color: green;
        }
      }
      contain: none;
      mask-image: none;
      mix-blend-mode: plus-lighter;
      overscroll-behavior: auto;
      rotate: calc(0deg * infinity);
      isolation: auto;
      scroll-behavior: smooth;
      scroll-snap-type: both mandatory;
      scroll-snap-align: none center;
      scroll-padding: 100px 0 0;
      scroll-padding-inline-start: 200px;
      background-clip: border-box;
      "TEST PASSED: parser recovery"
      -webkit-background-clip: text;
      background-color: hsl(124, 50%, 50% );
      border-block-start-style: solid;
      inline-size: /*[[some-range]]*/;
      font-size: 1q;
      @supports (transform-origin: 5% 5%) {}
      @supports selector(A > B) {}
      @supports not (transform-origin: 10em 10em 10em) {}
      @supports not (not (transform-origin: 2px)) {}
      @supports (display: grid) and (not (display: inline-grid)) {}
      @supports not (selector( :is(test::placeholder) + :first-child > div ) and (not (appearance:none))) {
        a {
          --red: red;
          color: var(--red);
        }
      }
    }
  }
  :where(#newscontainer .GridPanel > *):blank
  foo[attr="casesens" s"TEST PASSED: parser recovery"]:dir(ltr):lang(foo):read-only {
    margin: 2px;
  }
  :current(p, li, dt, dd) {
    background: yellow;
    --foo: if(x > 5) { this.width = 10 } else { foo = 2 };
    --foo: ;
    /*--foo:;*/ /*this is an error per spec*/
  }
  @foo bar;
  @foo (bar);
  @property --colorPrimary {
    syntax: '<color>';
    initial-value: magenta;
    @foo (bar) { a {} }
    inherits: false;
    & col.selected::marker || td:focus-visible {
      background: gray;
      color: white;
      font-weight: bold;
      overscroll-behavior: contain;
    }
  }
  col.selected::marker || td:focus-visible {
    background: gray;
    font-weight: bold;
    overscroll-behavior: contain;
    overflow-anchor: none;
    *color: red;
    content-visibility: auto;
    backdrop-filter: grayscale(.5);
    animation-name: "foo 2";
    box-shadow: 0 0 0 1px hsla(0, 0%, 0%, .1), 0 2px 2px rgba(0, 0, 0, .03), 0 4px 4px rgba(0, 0, 0, .04), 0 10px 8px rgba(0, 0, 0, .05), 0 15px 15px rgba(0, 0, 0, .06), 0 30px 30px rgba(0, 0, 0, .07), 0 70px 65px rgba(0, 0, 0, .09) !important;
  }
  @keyframes foo { /* ... */ }
  @keyframes "foo 2" { /* ... */ }
  @keyframes fadein {
    from { opacity: 0 }
    25% , 44% {}
    to {
      opacity: 1;
      @foo (bar) { a {} }
    }
  }
}

@-moz-document domain('example2.com') {
  /* should all be detected as colors */
  body :is(a, b, td) {
    color: LCH(from var(--accent) l c calc(h + 180deg));
    color: lab(from red l a b / calc(.5));
    color: lab(from red x y z);
    color: hwb(120 0% 49.8039% / .5);
    color: rgb(255, 0, 153.0);
    color: rgba(1E3 0 0 / .5e2);
    color: hsl( 50, 50%, 50%);
    /* These examples all specify the same color: a hot pink. */
    color: #f09;
    color: #F09;
    color: #ff0099;
    color: #FF0099;
    /* Hexadecimal syntax with alpha value */
    color: #f09f;
    color: #F09F;
    color: #ff0099ff;
    color: #FF0099FF;
    /* Hexadecimal syntax */
    color: #3a30/*   0% opaque green */;
    color: #3A3F/* full opaque green */;
    color: #33aa3300/*   0% opaque green */;
    color: #33AA3388/*  50% opaque green */;
  }
  /* rgb/rgba */
  th {
    /* Functional syntax */
    color: rgb(255, 0, 153);
    color: rgb(255, 0, 153);
    color: rgb(100%, 0%, 60%);
    color: rgb(100%, 0%, 60%);
    color: rgb(255 0 153);
    /* Functional syntax with alpha value */
    color: rgb(255, 0, 153, 1);
    color: rgb(255, 0, 153, 100%);
    color: rgb(255 0 153 / 1);
    color: rgb(255 0 153 / 100%);
    /* Functional syntax */
    color: rgba(51, 170, 51, .1)/*  10% opaque green */;
    color: rgba(51, 170, 51, .4)/*  40% opaque green */;
    color: rgba(51, 170, 51, .7)/*  70% opaque green */;
    color: rgba(51, 170, 51, 1)/* full opaque green */;
    /* Whitespace syntax */
    color: rgba(51 170 51 / 0.4)/*  40% opaque green */;
    color: rgba(51 170 51 / 40%)/*  40% opaque green */;
  }
  /* hsl/hsla */
  td {
    /* These examples all specify the same color: a lavender. */
    color: hsl(270, 60%, 70%);
    color: hsl(270, 60%, 70%);
    color: hsl(270 60% 70%);
    color: hsl(270deg, 60%, 70%);
    color: hsl(4.71239rad, 60%, 70%);
    color: hsl(.75turn, 60%, 70%);
    /* These examples all specify the same color: a lavender that is 15% opaque. */
    color: hsl(270, 60%, 50%, .15);
    color: hsl(270, 60%, 50%, 15%);
    color: hsl(270 60% 50% / .15);
    color: hsl(270 60% 50% / 15%);
    color: hsla(240, 100%, 50%, .05)/*   5% opaque blue */;
    color: hsla(240, 100%, 50%, .4)/*  40% opaque blue */;
    color: hsla(240, 100%, 50%, .7)/*  70% opaque blue */;
    color: hsla(240, 100%, 50%, 1)/* full opaque blue */;
    /* Whitespace syntax */
    color: hsla(240 100% 50% / .05)/*   5% opaque blue */;
    /* Percentage value for alpha */
    color: hsla(240 100% 50% / 5%)/*   5% opaque blue */;
  }
  /* keyword colors */
  a {
    color: aliceblue;
    color: antiquewhite;
    color: aqua;
    color: aquamarine;
    color: azure;
    color: beige;
    color: bisque;
    color: black;
    color: blanchedalmond;
    color: blue;
    color: blueviolet;
    color: brown;
    color: burlywood;
    color: cadetblue;
    color: chartreuse;
    color: chocolate;
    color: coral;
    color: cornflowerblue;
    color: cornsilk;
    color: crimson;
    color: cyan;
    color: darkblue;
    color: darkcyan;
    color: darkgoldenrod;
    color: darkgray;
    color: darkgreen;
    color: darkgrey;
    color: darkkhaki;
    color: darkmagenta;
    color: darkolivegreen;
    color: darkorange;
    color: darkorchid;
    color: darkred;
    color: darksalmon;
    color: darkseagreen;
    color: darkslateblue;
    color: darkslategray;
    color: darkslategrey;
    color: darkturquoise;
    color: darkviolet;
    color: deeppink;
    color: deepskyblue;
    color: dimgray;
    color: dimgrey;
    color: dodgerblue;
    color: firebrick;
    color: floralwhite;
    color: forestgreen;
    color: fuchsia;
    color: gainsboro;
    color: ghostwhite;
    color: gold;
    color: goldenrod;
    color: gray;
    color: green;
    color: greenyellow;
    color: grey;
    color: honeydew;
    color: hotpink;
    color: indianred;
    color: indigo;
    color: ivory;
    color: khaki;
    color: lavender;
    color: lavenderblush;
    color: lawngreen;
    color: lemonchiffon;
    color: lightblue;
    color: lightcoral;
    color: lightcyan;
    color: lightgoldenrodyellow;
    color: lightgray;
    color: lightgreen;
    color: lightgrey;
    color: lightpink;
    color: lightsalmon;
    color: lightseagreen;
    color: lightskyblue;
    color: lightslategray;
    color: lightslategrey;
    color: lightsteelblue;
    color: lightyellow;
    color: lime;
    color: limegreen;
    color: linen;
    color: magenta;
    color: maroon;
    color: mediumaquamarine;
    color: mediumblue;
    color: mediumorchid;
    color: mediumpurple;
    color: mediumseagreen;
    color: mediumslateblue;
    color: mediumspringgreen;
    color: mediumturquoise;
    color: mediumvioletred;
    color: midnightblue;
    color: mintcream;
    color: mistyrose;
    color: moccasin;
    color: navajowhite;
    color: navy;
    color: oldlace;
    color: olive;
    color: olivedrab;
    color: orange;
    color: orangered;
    color: orchid;
    color: palegoldenrod;
    color: palegreen;
    color: paleturquoise;
    color: palevioletred;
    color: papayawhip;
    color: peachpuff;
    color: peru;
    color: pink;
    color: plum;
    color: powderblue;
    color: purple;
    color: rebeccapurple;
    color: red;
    color: rosybrown;
    color: royalblue;
    color: saddlebrown;
    color: salmon;
    color: sandybrown;
    color: seagreen;
    color: seashell;
    color: sienna;
    color: silver;
    color: skyblue;
    color: slateblue;
    color: slategray;
    color: slategrey;
    color: snow;
    color: springgreen;
    color: steelblue;
    color: tan;
    color: teal;
    color: thistle;
    color: tomato;
    color: turquoise;
    color: violet;
    color: wheat;
    color: white;
    color: whitesmoke;
    color: yellow;
    color: yellowgreen;
    color: transparent;
  }
  html {
    color: chucknorris;
    color: blak;
  }
  button {
    color: #b5b5b5;
  }
}

@-moz-document
  domain( GOOD-examples.of.nesting )
{
  .foo {
    color: blue;
    & > .bar { color: red; }
  }
  .foo {
    color: blue;
    &.bar { color: red; }
  }
  .foo, .bar {
    color: blue;
    & + .baz, &.qux { color: red; }
    .parent & {
      color: blue;
      & .bar & .baz & .qux { color: red; }
    }
  }
  .foo {
    :not(&) {
      color: blue;
    }
    color: blue;
    & { padding: 2ch; }
  }
  .foo {
    color: blue;
    && { padding: 2ch; }
  }
  .error, #404 {
    &:hover > .baz { color: red; }
  }
  .foo {
    &:is(.bar, &.baz) { color: red; }
    .bar& { color: red; }
  }
  figure {
    .bar { color: red; }
    margin: 0;
    & > figcaption {
      background: hsl(0 0% 0% / 50%);
      > p {
        font-size: .9rem;
      }
    }
    .bar {
      color: blue;
    }
    & .bar, .baz {
      color: blue;
      :not(&) { color: blue; }
    }
    + .baz, .qux { color: red; }
  }
  .foo {
    color: blue;
    & > .bar { color: red; }
    > .baz { color: green; }
    &bar { color: red; }
    a {
     div { color: red; }
    }
  }
  @layer base {
    html {
      block-size: 100%;
      @layer support {
        > body {
          color:/*[[foo]]*/;
          min-block-size: 100%;
        }
      }
    }
  }
}

@-moz-document domain( BAD-examples.of.nesting ) {
  &.misplaced { padding: 2ch; }
  --foo: {};
  foo: bar;
  foo:bar;;
  foo:bar
}

&.misplaced { padding: 2ch; }

a { padding: 1em; margin: 1ex; }

@-moz-document domain(foo) {
  image-set {
    background-image: image-set("foo.png" 1x, "foo-2x.png" 2x, "foo-print.png" 600dpi);
    background-image: image-set("foo.png" foo);
  }
  animation {
    animation-timeline: scroll();
    animation-timeline: scroll(root block);
    animation-timeline: scroll(root2 block);
  }
  a {
   contain-intrinsic-size: auto none;
   contain-intrinsic-size: auto 100px;
   contain-intrinsic-size: 100px;
   contain-intrinsic-size: none;
  }
}
@scope (.good) to (.content > *) {
  p { color: green; }
  > p { color: green; }
  & > p { color: green; }
  @scope ([data-scope='main-component']) to ([data-scope] > *) {
    foo :scope p { color: green; }
    @scope (:scope > .child-scope) to (:scope .limit) {
      .content { color: red; }
    }
  }
}
@scope (.bad) too (.content > *) { p { color: green; } }
@scope (.bad) to { p { color: green; } }
@scope to (.bad) { p { color: green; } }
@scope (.bad:pseudo) to (foo,) { p { color: green; } }
a { offset-path: ray(180deg closest-side) }
a { color: light-dark(lime, green); }
a { color: light-dark(red); }
a { not-declaration:and(#not-hex) { color: red } }
